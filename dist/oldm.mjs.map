{"mappings":";;;;;AAGA,MAAM,iCAAW;IAChB,cAAc;IACd,UAAU;IACV,UAAU;IACV,cAAc;IACd,YAAY;IACZ,WAAW;IACX,aAAa;IACb,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,SAAS;IACT,UAAU;IACV,WAAW;IACX,UAAU;IACV,wBAAwB;IACxB,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,kBAAkB;IAClB,kBAAkB;AAEnB;AAEA,MAAM,gCAAU;AAKT,MAAM;IACZ,WAAW,CAAC,EAAC;IACb,QAAQ,IAAI,MAAK;IACjB,aAAa,IAAI,MAAK;IACtB,CAAC,EAAE,GAAG,KAAI;IAEV,YAAY,QAAQ,CAAE;QACrB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EACxB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG;QAExB,IAAI,CAAC,CAAC,EAAE,GAAG,CAAA,GAAA,SAAC;IACb;IAEA,MAAM,IAAI,EAAE,OAAO,EAAE;QACpB,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC;QACzB,MAAM,SAAS,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC;YAAE,iBAAiB;YAAI,SAAS;QAAO;QAC1E,MAAM,OAAO,OAAO,KAAK,CAAC;QAC1B,KAAK,IAAI,QAAQ,KAAM;YACnB,IAAI;YACJ,IAAI,KAAK,OAAO,CAAC,QAAQ,IAAE,aACzB,UAAU,MAAM,YAAY,CAAC,KAAK,OAAO,CAAC,EAAE;iBAE5C,UAAU,MAAM,UAAU,CAAC,KAAK,OAAO,CAAC,EAAE;YAE5C,QAAQ,YAAY,CAAC,KAAK,SAAS,CAAC,EAAE,EAAE,KAAK,MAAM;QACvD;QACA,oGAAoG;QAClG,OAAO;IACV;IAEA,MAAM,OAAO,EAAE;QACd,OAAO,IAAI,0CAAM,IAAI,EAAE;IACxB;AACD;AAEO,MAAM,kDAAc;IAEzB,YAAY,MAAM,EAAE,OAAO,CAAE;QAC7B,KAAK;QACL,OAAO,cAAc,CAAC,IAAI,EAAE,WAAW;YACtC,OAAO,WAAW;YAClB,UAAU;YACV,cAAc;YACd,YAAY;QACb;QACA,OAAO,cAAc,CAAC,IAAI,EAAE,UAAU;YACrC,OAAO;YACP,UAAU;YACV,cAAc;YACd,YAAY;QACb;QACE,OAAO,cAAc,CAAC,IAAI,EAAE,cAAc;YACxC,OAAO,IAAI;YACX,UAAU;YACV,cAAc;YACd,YAAY;QACd;QACA,IAAI,OAAO,QAAQ,EAAE;YACnB,IAAI,aAAa,EAAE;YACnB,KAAK,IAAI,CAAC,QAAO,IAAI,IAAI,OAAO,OAAO,CAAC,OAAO,QAAQ,EACrD,WAAW,IAAI,CAAC,SAAO,MAAI;YAE7B,CAAA,GAAA,oBAAM,EAAE,YAAY,CAAC,IAAI,EAAE,UAAU,WAAW,IAAI,CAAC;QACvD;QACA,IAAI,SACJ,CAAA,GAAA,oBAAM,EAAE,YAAY,CAAC,IAAI,EAAE,WAAW;IAEzC;IAEA,aAAa,OAAO,EAAE,SAAS,EAAE;QAC9B,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY;YAC3C,oFAAoF;YACpF,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC;YACnC,IAAI,UAAU,IAAI,CAAC,KAAK,CAAC;YACzB,IAAK,IAAI,YAAY,EAAG;gBACvB,IAAI,SAAS,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;gBACnC,KAAK,IAAI,OAAO,CAAC,CAAC,SAAS,CAAE;oBAC5B,IAAI,OAAO,MAAM,CAAC,IAAI;oBACtB,IAAI,MAAM,OAAO,CAAC,OACjB,OAAO,KAAK,GAAG,CAAC,CAAA;wBACf,IAAI,CAAE,CAAA,aAAa,CAAA,GAAA,oBAAM,EAAE,IAAI,AAAD,GAC7B,OAAO;6BACD,IAAI,EAAE,KAAK,IAAE,SACnB,OAAO;oBAET;yBAEA,IAAI,gBAAgB,CAAA,GAAA,oBAAM,EAAE,IAAI,IAAI,KAAK,KAAK,IAAE,SAC/C,MAAM,CAAC,IAAI,GAAG;gBAGjB;YACD;YACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;QAC/B;IACF;IAEA,WAAW,SAAS,EAAE;QACrB,IAAI;QACJ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY;YACtC,UAAU,IAAI,0CAAQ,IAAI,EAAE,WAAW,oCAAoC;;YACxE,IAAI,CAAC,IAAI,CAAC;YACV,IAAI,CAAC,YAAY,CAAC,SAAS;QAC/B,OACC,UAAU,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;QAGjC,OAAO;IACR;IAEC,aAAa,MAAM,EAAE;QACnB,IAAI;QACJ,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SACtB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;aACtB;YACL,OAAO,IAAI,0CAAQ,IAAI;YACvB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ;QAC9B;QACA,OAAO;IACT;IAED,MAAM,GAAG,EAAE;QACV,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,GAC9C,OAAO,IAAI,CAAA,GAAA,oBAAM,EAAE,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;QAE1D,IAAI,WAAW,IAAI,CAAC,MAAM,CAAC,QAAQ;QACnC,IAAK,IAAI,UAAU,SAAU;YAC5B,IAAI,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,GAClC,OAAO,IAAI,CAAA,GAAA,oBAAM,EAAE,IAAI,CAAC,SAAO,MAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM;QAE1E;QACA,OAAO;IACR;IAEA,KAAK,GAAG,EAAE;QACT,IAAI,eAAe,CAAA,GAAA,oBAAM,EAAE,IAAI,EAAE;YAChC,MAAM,IAAI,KAAK;YACf,IAAI,CAAC,QAAO,MAAM,GAAG,IAAI,KAAK,CAAC;YAC/B,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,EAC/B,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,GAAC;YAEpC,OAAO;QACR;QACA,OAAO;IACR;IAEC,QAAQ,KAAK,EAAE,IAAI,EAAE;QACnB,IAAI;QACJ,OAAO,OAAO;YACZ,KAAK;gBACH,SAAS,IAAI,OAAO;gBACpB,CAAA,GAAA,oBAAM,EAAE,OAAO,CAAC,QAAQ;gBAC1B;YACA,KAAK;gBACH,SAAS,IAAI,OAAO;gBACpB,CAAA,GAAA,oBAAM,EAAE,OAAO,CAAC,QAAQ;gBAC1B;YACA;gBACE,MAAM,IAAI,MAAM,qCAAoC,OAAO;QAE/D;QACA,IAAI,YAAY,IAAI,CAAC,KAAK,CAAC;QAC3B,IAAI,qBAAqB,CAAA,GAAA,oBAAM,EAAE,IAAI,IAAI,8BAAQ,CAAC,UAAU,KAAK,CAAC,EAChE,IAAI,CAAC,CAAC,aAAa,CAAC,QAAQ,8BAAQ,CAAC,UAAU,KAAK,CAAC;aAErD,CAAA,GAAA,oBAAM,EAAE,YAAY,CAAC,QAAQ,SAAS;QAExC,OAAO;IACT;IAEA,CAAC,aAAa,CAAC,GAAG,EAAE,UAAU;QAC5B,IAAI,OAAO,WAAW,SAAS,CAAC,GAAG,WAAW,MAAM,GAAC,GAAG,KAAK,CAAC,KAAK,GAAG;QACtE,wCAAwC;QACxC,CAAA,GAAA,oBAAM,EAAE,OAAO,CAAC,KAAK;IACvB;IAEA,cAAc,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE;QACpC,IAAI,aAAa,IAAI,CAAC,MAAM,CAAC,UAAU;QACxC,IAAI,CAAC,WAAW,GAAG,CAAC,SACnB,WAAW,GAAG,CAAC,QAAQ;YACtB,UAAU;gBAAC;aAAI;QAChB;aACO;YACN,IAAI,oBAAoB,WAAW,GAAG,CAAC;YACvC,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAC/B,iBAAiB,CAAC,SAAS,GAAC;gBAAC;aAAI;iBAEjC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC;QAEnC;IACD;AACF;AAEO,MAAM;IACZ,CAAC,KAAK,CAAA;IAEL,YAAY,KAAK,EAAE,EAAE,CAAE;QACvB,IAAI,CAAC,CAAC,KAAK,GAAG;QACZ,IAAI,IAAI;YACN,IAAI,UAAU,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;YAChC,IAAI,mBAAmB,CAAA,GAAA,oBAAM,EAAE,IAAI,EACjC,UAAU,QAAQ,KAAK;YAEzB,CAAA,GAAA,oBAAM,EAAE,YAAY,CAAC,IAAI,EAAE,MAAM;YACjC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI;QACvC;IACH;IAEA,IAAI,KAAK;QACR,OAAO,CAAA,GAAA,oBAAM,EAAE,YAAY,CAAC,IAAI,EAAE;IACnC;IAEA,aAAa,WAAW,EAAE,MAAM,EAAE;QACjC,IAAI,eAAa,+BAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE;aAClC;YACN,IAAI,YAAY,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;YAClC,IAAI,qBAAqB,CAAA,GAAA,oBAAM,EAAE,IAAI,EACpC,YAAY,UAAU,KAAK;YAE5B,IAAI,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC;YAC3B,IAAI,iBAAiB,CAAA,GAAA,oBAAM,EAAE,IAAI,EAChC,IAAI,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,KAAK,EAAE,WAAW,IAAI,CAAC,EAAE;YAE1D,IAAI,CAAC,IAAI,CAAC,UAAU,EACnB,IAAI,CAAC,UAAU,GAAG;iBACZ,IAAI,MAAM,OAAO,CAAC,IAAI,CAAC,UAAU,GACvC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;iBAErB,IAAI,CAAC,UAAU,GAAG;gBAAE,IAAI,CAAC,UAAU;gBAAE;aAAM;QAE7C;IACD;IAEA,QAAQ,SAAS,EAAE;QAClB,IAAI,qBAAqB,CAAA,GAAA,oBAAM,EAAE,IAAI,EACpC,YAAY,UAAU,KAAK;QAE5B,IAAI,aAAa,CAAA,GAAA,oBAAM,EAAE,YAAY,CAAC,IAAI,EAAE;QAC5C,IAAI,CAAC,YACJ,aAAa,EAAE;QAEhB,IAAI,CAAC,MAAM,OAAO,CAAC,aAClB,aAAa,WAAW,KAAK,CAAC;QAE/B,IAAI,CAAC,WAAW,OAAO,CAAC,YAAY;YACnC,WAAW,IAAI,CAAC;YAChB,CAAA,GAAA,oBAAM,EAAE,YAAY,CAAC,IAAI,EAAE,SAAS;QACrC;IACD;IAEA,CAAC,QAAQ,CAAC,MAAM;QACf,IAAI,OAAO,QAAQ,IAAE,WACjB,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,OAAO,QAAQ,CAAC,EAAE;aAC1D;YACN,IAAI,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM;YAC/B,IAAI,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,GAC3C,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE;iBACnC,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,GACpC,SAAS,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE;iBAC1B,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,GAC7C,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE;iBAEjD,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE;QAEtC;QACA,OAAO;IACR;AACD;AAEe,kDAAgB,WAAS,EAAE,EAAE,KAAG,IAAI;IAClD,OAAO,IAAI,0CAAO,UAAU;AAC7B","sources":["src/oldm.mjs"],"sourcesContent":["import JSONTag from '@muze-nl/jsontag'\nimport N3 from 'n3'\n\nconst xsdTypes = {\n\txsd$dateTime: '<datetime>',\n\txsd$time: '<time>',\n\txsd$date: '<date>',\n\txsd$duration: '<duration>',\n\txsd$string: '<string>',\n\txsd$float: '<float>',\n\txsd$decimal: '<decimal>',\n\txsd$double: '<float64>',\n\txsd$anyURI: '<url>',\n\txsd$integer: '<int>',\n\txsd$int: '<int>',\n\txsd$long: '<int64>',\n\txsd$short: '<int16>',\n\txsd$byte: '<int8>', // yes really: http://www.datypic.com/sc/xsd/t-xsd_byte.html\n\txsd$nonNegativeInteger: '<uint>',\n\txsd$unsignedLong: '<uint64>',\n\txsd$unsignedInt: '<uint>',\n\txsd$unsignedShort: '<uint16>',\n\txsd$unsignedByte: '<uint8>',\n\txsd$base64Binary: '<blob class=\"base64\">',\n\t//TODO: check that this list is complete enough (missing types will be encoded with <object class=\"xsd$Type\">)\n}\n\nconst rdfType = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'\n\n//TODO: build a datamapper on top of this, that can hydrate specific\n//object types (classes) to specific javascript classes\n\nexport class Parser {\n\tprefixes = {}\n\tindex = new Map()\n\tunresolved = new Map()\n\t#n3 = null\n\n\tconstructor(prefixes) {\n\t\tthis.prefixes = prefixes\n\t\tif (!this.prefixes['xsd']) {\n\t\t\tthis.prefixes['xsd'] = 'http://www.w3.org/2001/XMLSchema#'\n\t\t}\n\t\tthis.#n3 = N3\n\t}\n\n\tparse(text, baseURI) {\n\t\tconst graph = this.graph(baseURI)\n\t\tconst parser = new this.#n3.Parser({ blankNodePrefix: '', baseIRI: baseURI})\n\t\tconst data = parser.parse(text)\n\t\tfor (let quad of data) {\n      let subject\n      if (quad.subject.termType=='BlankNode') {\n        subject = graph.addBlankNode(quad.subject.id)\n      } else {\n        subject = graph.addSubject(quad.subject.id)\n      }\n      subject.addPredicate(quad.predicate.id, quad.object)\n\t\t}\n\t\t//TODO: check if baseURI is in the graph, if so return it instead of the graph? e.g. profile/card#me\n    return graph\n\t}\n\n\tgraph(baseURI) {\n\t\treturn new Graph(this, baseURI,)\n\t}\n}\n\nexport class Graph extends Array {\n \n  constructor(parser, baseURI) {\n\t\tsuper()\n\t\tObject.defineProperty(this, 'baseURI', {\n\t\t\tvalue: baseURI ?? '',\n\t\t\twritable: true,\n\t\t\tconfigurable: false,\n\t\t\tenumerable: false\n\t\t})\n\t\tObject.defineProperty(this, 'parser', {\n\t\t\tvalue: parser,\n\t\t\twritable: false,\n\t\t\tconfigurable: false,\n\t\t\tenumerable: false\n\t\t})\n    Object.defineProperty(this, 'blankNodes', {\n      value: new Map(),\n      writable: true,\n      configurable: false,\n      enumerable: false\n    })\n    if (parser.prefixes) {\n      let prefixAttr = []\n      for (let [prefix,url] of Object.entries(parser.prefixes)) {\n        prefixAttr.push(prefix+':'+url)\n      }\n      JSONTag.setAttribute(this, 'prefix', prefixAttr.join(' '))\n    }\n    if (baseURI) {\n  \t\tJSONTag.setAttribute(this, 'baseURI', baseURI)\n    }\n\t}\n\n\tresolveLinks(subject, subjectID) {\n    if (this.parser.unresolved.has(subjectID)) {\n\t  \t// TODO: test this by loading two graphs with the same parser and links between them\n\t  \tlet u = this.parser.unresolved.get(subjectID)\n\t  \tlet shortID = this.short(subjectID)\n\t  \tfor (let parentID in u) {\n\t  \t\tlet parent = this.parser.index.get(parentID)\n\t  \t\tfor (let key of u[parentID]) {\n\t  \t\t\tlet prop = parent[key]\n\t  \t\t\tif (Array.isArray(prop)) {\n\t  \t\t\t\tprop = prop.map(e => {\n\t  \t\t\t\t\tif (!(e instanceof JSONTag.Link)) {\n\t  \t\t\t\t\t\treturn e\n\t  \t\t\t\t\t} else if (e.value==shortID) {\n\t  \t\t\t\t\t\treturn subject\n\t  \t\t\t\t\t}\n\t  \t\t\t\t})\n\t  \t\t\t} else {\n\t  \t\t\t\tif (prop instanceof JSONTag.Link && prop.value==shortID) {\n\t  \t\t\t\t\tparent[key] = subject\n\t  \t\t\t\t}\n\t  \t\t\t}\n\t  \t\t}\n\t  \t}\n\t  \tthis.parser.unresolved.remove(subjectID)\n\t  }\n\t}\n\n\taddSubject(subjectID) {\n\t\tlet subject\n\t\tif (!this.parser.index.has(subjectID)) {\n\t\t\tsubject = new Subject(this, subjectID) // link back to its containing graph\n      this.push(subject)\n      this.resolveLinks(subject, subjectID)\n\t\t} else {\n\t\t\tsubject = this.parser.index.get(subjectID)\n\t\t\t//TODO: check if subject is part of this graph, if not, move it to this graph\n\t\t}\n\t\treturn subject\n\t}\n\n  addBlankNode(tempID) {\n    let node\n    if (this.blankNodes.has(tempID)) {\n      node = this.blankNodes.get(tempID)\n    } else {\n      node = new Subject(this)\n      this.blankNodes.set(tempID, node)\n    }\n    return node\n  }\n  \n\tshort(uri) {\n\t\tif (this.baseURI && uri.startsWith(this.baseURI)) {\n\t\t\treturn new JSONTag.Link(uri.substring(this.baseURI.length))\n\t\t}\n\t\tlet prefixes = this.parser.prefixes\n\t\tfor (let prefix in prefixes) {\n\t\t\tif (uri.startsWith(prefixes[prefix])) {\n\t\t\t\treturn new JSONTag.Link(prefix+'$'+uri.substring(prefixes[prefix].length))\n\t\t\t}\n\t\t}\n\t\treturn uri\n\t}\n\n\tlong(uri) {\n\t\tif (uri instanceof JSONTag.Link) {\n\t\t\turi = uri.value\n\t\t\tlet [prefix,short] = uri.split('$')\n\t\t\tif (this.parser.prefixes[prefix]) {\n\t\t\t\turi = this.parser.prefixes[prefix]+short\n\t\t\t}\n\t\t\treturn uri\n\t\t}\n\t\treturn uri\n\t}\n  \n  setType(value, type) {\n    let result\n    switch(typeof value) {\n      case 'string':\n        result = new String(value)\n        JSONTag.setType(result, 'string')\n      break\n      case 'Number':\n        result = new Number(value)\n        JSONTag.setType(result, 'number')\n      break\n      default:\n        throw new Error('missing type implementation for '+(typeof value))\n      break\n    }\n    let shortType = this.short(type)\n    if (shortType instanceof JSONTag.Link && xsdTypes[shortType.value]) {\n      this.#setTypeString(result, xsdTypes[shortType.value])    \t\t\n  \t} else {\n      JSONTag.setAttribute(result, 'class', type)    \n    }\n    return result\n  }\n  \n  #setTypeString(obj, typeString) {\n    let type = typeString.substring(1, typeString.length-1).split(' ').pop()\n    //TODO: parse and set attributes as well\n    JSONTag.setType(obj, type)\n  }\n\n  addUnresolved(linkID, key, parentID) {\n  \tlet unresolved = this.parser.unresolved\n\t\tif (!unresolved.has(linkID)) {\n\t\t\tunresolved.set(linkID, {\n\t\t\t\tparentID: [key]\n\t\t\t})\n\t  } else {\n\t  \tlet unresolvedEntries = unresolved.get(linkID)\n\t  \tif (!unresolvedEntries[parentID]) {\n\t  \t\tunresolvedEntries[parentID]=[key]\n\t  \t} else {\n\t  \t\tunresolvedEntries[parentID].push(key)\n\t  \t}\n\t  }\n  }\n}\n\nexport class Subject {\n\t#graph\n\t\n  constructor(graph, id) {\n\t\tthis.#graph = graph\n    if (id) {\n      let shortID = this.#graph.short(id)\n      if (shortID instanceof JSONTag.Link) {\n        shortID = shortID.value\n      }\n      JSONTag.setAttribute(this, 'id', shortID)\n      this.#graph.parser.index.set(id, this)\n    }\n\t}\n\n\tget id() {\n\t\treturn JSONTag.getAttribute(this, 'id')\n\t}\n\n\taddPredicate(predicateId, object) {\n\t\tif (predicateId==rdfType) {\n\t\t\tthis.addType(this.#graph.short(object.id))\n\t\t} else {\n\t\t\tlet shortPred = this.#graph.short(predicateId)\n\t\t\tif (shortPred instanceof JSONTag.Link) {\n\t\t\t\tshortPred = shortPred.value\n\t\t\t}\n\t\t\tlet value = this.#getValue(object)\n\t\t\tif (value instanceof JSONTag.Link) {\n\t\t\t\tthis.#graph.addUnresolved(value.value, shortPred, this.id)\n\t\t\t}\n\t\t\tif (!this[shortPred]) {\n\t\t\t\tthis[shortPred] = value\n\t\t\t} else if (Array.isArray(this[shortPred])) {\n\t\t\t\tthis[shortPred].push(value)\n\t\t\t} else {\n\t\t\t\tthis[shortPred] = [ this[shortPred], value]\n\t\t\t}\n\t\t}\n\t}\n\n\taddType(shortType) {\n\t\tif (shortType instanceof JSONTag.Link) {\n\t\t\tshortType = shortType.value\n\t\t}\n\t\tlet classNames = JSONTag.getAttribute(this, 'class')\n\t\tif (!classNames) {\n\t\t\tclassNames = []\n\t\t}\n\t\tif (!Array.isArray(classNames)) {\n\t\t\tclassNames = classNames.split(' ')\n\t\t}\n\t\tif (!classNames.indexOf(shortType)) {\n\t\t\tclassNames.push(shortType)\n\t\t\tJSONTag.setAttribute(this, 'class', classNames)\n\t\t}\n\t}\n\n\t#getValue(object) {\n\t\tif (object.termType=='Literal') {\n      object = this.#graph.setType(object.value, object.datatype.id)\n\t\t} else { // URI\n\t\t\tlet parser = this.#graph.parser\n\t\t\tif (object.id.startsWith(this.#graph.baseURI)) {\n\t\t\t\tobject = this.#graph.addSubject(object.id)\n\t\t\t} else if (parser.index.has(object.id)) {\n\t\t\t\tobject = parser.index.get(object.id)\n      } else if (this.#graph.blankNodes.has(object.id)) {\n        object = this.#graph.blankNodes.get(object.id)\n\t\t\t} else {\n\t\t\t\tobject = this.#graph.short(object.id)\n\t\t\t}\n\t\t}\n\t\treturn object\n\t}\n}\n\nexport default function parser(prefixes=[], n3=null) {\n\treturn new Parser(prefixes, n3)\n}"],"names":[],"version":3,"file":"oldm.mjs.map","sourceRoot":"../"}